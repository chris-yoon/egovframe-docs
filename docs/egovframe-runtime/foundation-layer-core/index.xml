<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>공통기반 핵심 on 표준프레임워크 개발가이드</title>
    <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/</link>
    <description>Recent content in 공통기반 핵심 on 표준프레임워크 개발가이드</description>
    <generator>Hugo</generator>
    <language>ko</language>
    <atom:link href="https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IoC Container</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container/</guid>
      <description>&lt;h1 id=&#34;ioc-container&#34;&gt;IoC Container&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#ioc-container&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;프레임워크의 기본적인 기능인 Inversion of Control(IoC) Container 기능을 제공하는 서비스이다.&lt;br&gt;&#xA;객체의 생성 시, 객체가 참조하고 있는 타 객체에 대한 종속성을 소스 코드 내부에서 하드 코딩하는 것이 아닌, 소스 코드 외부에서 설정하게 함으로써, 유연성 및 확장성을 향상시킨다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;주요-개념&#34;&gt;주요 개념&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%a3%bc%ec%9a%94-%ea%b0%9c%eb%85%90&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;inversion-of-controlioc&#34;&gt;Inversion of Control(IoC)&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#inversion-of-controlioc&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;IoC는 Inversion of Control의 약자이다. 우리나라 말로 직역해 보면 &amp;ldquo;역제어&amp;quot;라고 할 수 있다. 제어의 역전 현상이 무엇인지 살펴본다.&lt;br&gt;&#xA;기존에 자바 기반으로 어플리케이션을 개발할 때 자바 객체를 생성하고 서로간의 의존 관계를 연결시키는 작업에 대한 제어권은 보통 개발되는 어플리케이션에 있었다.&lt;br&gt;&#xA;그러나, Servlet, EJB 등을 사용하는 경우 Servlet Container, EJB Container에게 제어권이 넘어가서 객체의 생명주기(Life Cycle)를 Container들이 전담하게 된다.&lt;br&gt;&#xA;이처럼 IoC에서 이야기하는 제어권의 역전이란 객체의 생성에서부터 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀌었다는 것을 의미한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>IoC Container Basics</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-basics/</guid>
      <description>&lt;h1 id=&#34;basics&#34;&gt;Basics&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#basics&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring Framework에서 객체가 생성자 인수, 팩토리 메서드에 대한 인수 또는 객체 인스턴스가 생성되거나 팩토리 메서드에서 반환된 후 객체 인스턴스에 설정된 속성을 통해서만 종속성(함께 작업하는 다른 객체)을 정의하는 프로세스를 제어의 역전(Inversion of Control, IoC)라고 한다. 의존성 주입(Dependency Injection, DI)은 모듈간의 의존성을 모듈의 외부 컨테이너 에서 주입시켜주는 기능으로 IoC의 한 종류이다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring Framework에서 Bean은 어플리케이션을 구성하고, IoC Container에 의해 관리되어지는 객체로 간단히 말해 IoC Container에 의해 객체화되고, 조립되고, 또는 관리되는 객체를 의미한다.&lt;br&gt;&#xA;Bean들과 Bean들간의 종속성은 Container가 사용하는 설정 메타데이터에 의해 결정된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependencies</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-dependencies/</guid>
      <description>&lt;h1 id=&#34;dependencies&#34;&gt;Dependencies&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#dependencies&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;일반적인 엔터프라이즈 애플리케이션은 단일 객체(또는 Spring 용어로 빈)로만 이루어지지 않고 간단한 애플리케이션도 최종 사용자에게 일관된 사용자 경험을 제공하기 위해 여러 객체가 함께 작동한다. 이러한 객체들은 독립적으로 존재하며, Spring 프레임워크를 사용하여 각각의 빈으로 정의된다. 여기서는 독립적으로 정의된 여러 빈들이 협업하여 목표를 달성하는 방법에 대해 설명한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;종속성-삽입injecting-dependencies&#34;&gt;종속성 삽입(Injecting dependencies)&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%a2%85%ec%86%8d%ec%84%b1-%ec%82%bd%ec%9e%85injecting-dependencies&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;종속성 삽입(Dependency Injection(DI))의 기본적인 원칙은 객체는 단지 생성자나 set 메소드를 통해서만 종속성(필요로 하는 객체)를 정의한다는 것이다.&lt;br&gt;&#xA;그러면 Container는 Bean 객체를 생성할 때, Bean이 정의한 종속성을 추가하게 되는데 이는 Bean이 스스로 필요한 객체를 생성하거나 찾는 등의 제어를 가지는 것과는 반대의 개념으로 Inversion of Control(IoC)라고 부른다.&lt;br&gt;&#xA;종속성 삽입에는 두 가지 방법이 있다. &lt;a href=&#34;https://chris-yoon.github.io/egovframe-docs/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-dependencies/#constructor-injection&#34;&gt;Constructor Injection&lt;/a&gt;과 &lt;a href=&#34;https://chris-yoon.github.io/egovframe-docs/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-dependencies/#setter-injection&#34;&gt;Setter Injection&lt;/a&gt;이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bean Scopes</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_scope/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_scope/</guid>
      <description>&lt;h1 id=&#34;bean-scope&#34;&gt;Bean scope&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#bean-scope&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Bean 정의는 실제 Bean 객체를 생성하는 방식을 정의하는 것으로 Class와 마찬가지로 하나의 Bean 정의에 해당하는 다수의 객체가 생성될 수 있다.&lt;br&gt;&#xA;Bean 정의를 통해 객체에 다양한 종속성 및 설정값을 주입할 수 있을 뿐 아니라, 객체의 범위(Scope)를 정의할 수 있다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring 프레임워크는 6개의 Scope를 지원하며, 이 중 4개의 Scope는 Web-aware ApplicationContext를 사용하는 경우에만 사용할 수 있다. 또한, 사용자 정의 범위를 생성할 수도 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Customizing the nature of a Bean</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-customizing_the_nature_of_a_bean/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-customizing_the_nature_of_a_bean/</guid>
      <description>&lt;h1 id=&#34;customizing-the-nature-of-a-bean&#34;&gt;Customizing the nature of a bean&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#customizing-the-nature-of-a-bean&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;컨테이너의 빈 라이프사이클 관리와 상호 작용하기 위해 Spring InitializingBean 및 DisposableBean 인터페이스를 구현할 수 있는데, 컨테이너는 전자의 경우 afterPropertiesSet()을 호출하고 후자의 경우 destroy()를 호출하여 빈이 초기화 및 소멸될 때 특정 작업을 수행하도록 한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;lifecycle-callbacks&#34;&gt;Lifecycle callbacks&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#lifecycle-callbacks&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Spring Framework는 Container 내부의 bean의 행동을 변화시길 수 있는 다양한 callback interface를 제공한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bean Definition Profiles</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-bean-definition-profiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-bean-definition-profiles/</guid>
      <description>&lt;h1 id=&#34;bean-definition-profiles&#34;&gt;Bean Definition Profiles&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#bean-definition-profiles&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Bean의 Profile은 Spring f/w ver. 3.1부터 추가되었으며 동일한 id의 bean을 여러 개 정의하여 사용자의 설정으로 활성화시킨 Profile의 해당 bean이 Runtime시에 동작하도록 하는 기능이다. 보통 개발시점과 운영시점에 bean의 Profile설정 변경만으로 Spring Container에서 Bean적용이 달리 적용되도록 하는데 쓰인다.&lt;/p&gt;&#xA;&lt;p&gt;Profile설정 시, 반드시 Profile을 활성화해야만 사용가능하다. 만약 Profile만 설정하고 활성화하지 않으면 Exeption(NoSuchBeanDefinitionException)이 발생한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;아래에서 Profile을 설정하는 방법과 Profile을 활성화(Active Profile)하는 방법에 대하여 알아본다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bean Definition Inheritance</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_definition_inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-bean_definition_inheritance/</guid>
      <description>&lt;h1 id=&#34;bean-definition-inheritance&#34;&gt;Bean definition inheritance&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#bean-definition-inheritance&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Bean 정의는 많은 양의 설정 정보를 포함하고 있다. 자식 bean 정의는 부모 bean 정의로부터 설정 정보를 상속받은 bean 정의를 의미한다. 자식 bean 정의는 필요에 따라 부모 bean 정의로부터 상속받은 설정 정보를 덮어쓰거나 추가할 수 있다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;XML 기반 설정에서는 자식 bean 정의에 &amp;lsquo;parent&amp;rsquo; attribute를 사용하여 상속관계를 정의할 수 있다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;inheritedTestBean&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;abstract=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c4a000&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;org.springframework.beans.TestBean&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;inheritsWithDifferentClass&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c4a000&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;org.springframework.beans.DerivedTestBean&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c4a000&#34;&gt;parent=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;inheritedTestBean&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;init-method=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;initialize&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;override&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;!-- the age property value of 1 will be inherited from  parent --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Container Extension Points</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-container_extension_points/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-container_extension_points/</guid>
      <description>&lt;h1 id=&#34;container-extension-points&#34;&gt;Container extension points&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#container-extension-points&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring Framework의 IoC 컴포넌트는 확장을 고려하여 설계되었다. 일반적으로 어플리케이션 개발자가 다양한 BeanFactory 또는 ApplicationContext 구현 클래스를 상속받을 필요는 없다.&lt;br&gt;&#xA;Spring IoC Container는 특별한 통합 interface의 구현체를 삽입하여 확장할 수 있다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;beanpostprocessors를-사용한-확장customizing-beans-using-beanpostprocessors&#34;&gt;BeanPostProcessors를 사용한 확장(Customizing beans using BeanPostProcessors)&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#beanpostprocessors%eb%a5%bc-%ec%82%ac%ec%9a%a9%ed%95%9c-%ed%99%95%ec%9e%a5customizing-beans-using-beanpostprocessors&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;BeanPostProcessors interface는 다수의 callback 메소드를 정의하고 있는데, 어플리케이션 개발자는 이들 메소드를 구현함으로써 자신만의 객체화 로직(instantiation logic), 종속성 해결 로직(dependency-resolution logic) 등을 제공할 수 있다.&lt;br&gt;&#xA;org.springframework.beans.factory.config.BeanPostProcessor interface는 두개의 callback 메소드로 구성되어 있다. 특정 class가 Container에 post-processor로 등록되면, post-processor는 Container에서 생성되는 각각의 bean 객체에 대해서, Container 객체화 메소드 전에 callback을 받는다.&lt;br&gt;&#xA;중요한 것은 BeanFactory는 post-processor를 다루는 방식에 있어서 ApplicationContext와는 조금 다르다. ApplicationContext는 BeanPostProcessor interface를 구현한 bean을 &lt;em&gt;&lt;strong&gt;자동적으로 인식하고&lt;/strong&gt;&lt;/em&gt; post-processor로 등록한다. 하지만 BeanFactory 구현을 사용하면 post-processor는 다음과 같이 명시적으로 등록되어야 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The ApplicationContext</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-the_applicationcontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-the_applicationcontext/</guid>
      <description>&lt;h1 id=&#34;the-applicationcontext&#34;&gt;The ApplicationContext&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#the-applicationcontext&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;org.springframework.context 패키지는 BeanFactory 인터페이스를 확장하는 ApplicationContext 인터페이스를 추가하고, 다른 인터페이스를 확장하여 보다 애플리케이션 프레임워크 지향적인 스타일로 추가 기능을 제공한다.&lt;br&gt;&#xA;많은 사람들이 ApplicationContext를 완전히 선언적인 방식으로 사용하며, 프로그래밍 방식으로 생성하지 않고 ContextLoader와 같은 지원 클래스에 의존하여 Java EE 웹 애플리케이션의 정상적인 시작 프로세스의 일부로 ApplicationContext를 자동으로 인스턴스화한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;ApplicationContext는 BeanFactory를 확장한 것으로 BeanFactory의 기능 외에 아래와 같은 기능을 제공한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Annotation-based Configuration</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-annotation-based_configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-annotation-based_configuration/</guid>
      <description>&lt;h1 id=&#34;annotation-based-configuration&#34;&gt;Annotation-based configuration&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#annotation-based-configuration&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring Framework는 Spring의 종속성 삽입을 위해 annotation을 사용할 수 있다. Spring 2.0에서는 @Required 어노테이션으로 필수 속성을 강제할 수 있는 기능이 도입되었고 Spring 2.5에서는 이와 동일한 일반적인 접근 방식을 따라 Spring의 의존성 주입을 구동할 수 있게 되었으며, Spring 3.0부터 @Inject 및 @Named와 같이 javax.inject 패키지에 포함된 JSR-330(Java용 의존성 주입) 어노테이션에 대한 지원이 추가되었다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring @Autowired annotation은 자동 엮음과 같은 기능을 제공하지만, 좀 더 세밀한 제어와 넓은 사용성을 제공한다. Spring Framework는 @Resource, @PostConstruct, @PreDestroy 등의 JSR-250 annotation도 지원한다. 이들 annotation을 사용하기 위해서는 Spring Container에 특정 BeanPostProcessors를 등록해야만 한다. 항상 그렇듯이, 이들 BeanPostProcessors가 개별적인 bean 정의로 등록될 수도 있지만, &amp;lsquo;context&amp;rsquo; namespace를 사용하여 등록할 수도 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Classpath Scanning for Managed Components</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-classpath_scanning_for_managed_components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-classpath_scanning_for_managed_components/</guid>
      <description>&lt;h1 id=&#34;classpath-scanning-for-managed-components&#34;&gt;Classpath scanning for managed components&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#classpath-scanning-for-managed-components&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;본 장의 앞선 대부분의 예제들은 Spring Container 안에서 BeanDefinition을 생성하기 위한 설정 메타데이터를 명기하기 위해서 XML을 사용해왔다. 이전 section &lt;a href=&#34;https://chris-yoon.github.io/egovframe-docs/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-annotation-based_configuration/&#34;&gt;Annotaion-based configuration&lt;/a&gt;은 source-level annotation을 사용하여 많은 양의 설정 메타데이터를 제공할 수 있음을 보였다. 이들 예제에서도 어쨌든, “base” bean 정의가 XML 파일 안에 명시적으로 정의되었다. 이번 section은 classpath를 검색하고, &lt;em&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/em&gt;를 통해 검사함으로써,&#xA;&lt;em&gt;&lt;strong&gt;대상 컴퍼넌트(candidate component)&lt;/strong&gt;&lt;/em&gt; 를 검출하는 방법을 소개한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JSR 330 표준 어노테이션 사용하기</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-jsr_330_standard_annotations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-jsr_330_standard_annotations/</guid>
      <description>&lt;h1 id=&#34;jsr-330-표준-어노테이션-사용하기&#34;&gt;JSR 330 표준 어노테이션 사용하기&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#jsr-330-%ed%91%9c%ec%a4%80-%ec%96%b4%eb%85%b8%ed%85%8c%ec%9d%b4%ec%85%98-%ec%82%ac%ec%9a%a9%ed%95%98%ea%b8%b0&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;스프링 3.0부터 JSR-330 표준 어노테이션(의존성 주입)을 지원한다. 이 어노테이션들은 스프링 어노테이션들과 같은 방법으로 스캔된다. 이 어노테이션들을 사용하기 위해서는 클래스패스에 관련 jar 파일들을 가지고 있어야 한다.&lt;br&gt;&#xA;Maven을 사용한다면 Maven Repository(&lt;a href=&#34;https://mvnrepository.com/artifact/javax.inject/javax.inject/1&#34;&gt;https://mvnrepository.com/artifact/javax.inject/javax.inject/1&lt;/a&gt;)에서 javax.inject라는 아티펙트가 제공된다. pom.xml 파일에 아래의 의존성을 추가하여 사용할 수 있다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.inject&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.inject&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Java-based Configuration</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-java-based_configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-java-based_configuration/</guid>
      <description>&lt;h1 id=&#34;java-based-configuration&#34;&gt;Java-based configuration&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#java-based-configuration&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Java 코드에서 주석을 사용하여 스프링 컨테이너를 구성하는 방법에 대해 알아본다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;기본-개념--bean-configurationl&#34;&gt;기본 개념 : @Bean, @Configurationl&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b8%b0%eb%b3%b8-%ea%b0%9c%eb%85%90--bean-configurationl&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;스프링의 자바 기반 설정에서는 @Configuration 어노테이션 클래스와 @Bean 어노테이션 메소드를 지원한다.&lt;br&gt;&#xA;@Bean 어노테이션은 Spring IoC 컨테이너가 관리할 새로운 객체를 인스턴스화하고, 초기화하는데 사용되며, Spring의 XML 설정에서의 &amp;lt;bean/&amp;gt;과 같은 역할을 한다.&lt;br&gt;&#xA;@Bean 어노테이션은 붙인 메소드는 스프링 @Component와 함께 사용할 수 있지만, 대체로 @Configuration Bean과 사용한다.&lt;br&gt;&#xA;@Configuration 어노테이션은 해당 클래스의 목적이 Bean 설정을 위한 소스임을 나타내며, @Configuration 클래스는 같은 클래스 안에 있는 @Bean 메소드들끼리 서로를 호출하여 Bean 사이의 의존성을 정의할 수 있게 한다.&lt;br&gt;&#xA;@Configuration 클래스를 아래와 같이 구성할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Environment Abstraction</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-environment_abstraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-environment_abstraction/</guid>
      <description>&lt;h1 id=&#34;environment-abstraction&#34;&gt;Environment Abstraction&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#environment-abstraction&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Environment Abstraction은 환경에 대한 추상화로 Spring에서 제공하는 Environment 인터페이스를 이용한다.&lt;br&gt;&#xA;Environment 인터페이스는 애플리케이션 환경의 두 가지 주요 측면을 모델링하는 컨테이너에 통합된 추상화로, profiles 나 properties처럼 프로그램의 환경 변수나 Application의 프로필을 관리할 때 사용하게 된다.&lt;/p&gt;&#xA;&lt;p&gt;Profile은 지정된 프로파일이 활성화된 경우에만 컨테이너에 등록되는 명명된 빈 정의의 논리적 그룹이다.&lt;br&gt;&#xA;Bean은 XML 또는 주석으로 정의된 프로필에 할당될 수 있다. 프로필과 관련된 환경 개체의 역할은 현재 활성화된 Profile(있는 경우)과 기본적으로 활성화되어야 하는 Profile(있는 경우)을 결정하는 것이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inversion of Control</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-inversion-of-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-inversion-of-control/</guid>
      <description>&lt;h1 id=&#34;inversion-of-control&#34;&gt;Inversion of Control&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#inversion-of-control&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;본 문서는 &lt;a href=&#34;https://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt;가 저술한 &lt;a href=&#34;https://martinfowler.com/bliki/InversionOfControl.html&#34;&gt;Inversion of Control&lt;/a&gt; 문서를 번역 및 일부 의역한 것이다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Inversion of Control(IoC)는 당신이 프레임워크를 확장할 때 마주치게 되는 일반적인 사상이다. 또한, 프레임워크를 정의하는 특징이기도 하다.&lt;/p&gt;&#xA;&lt;p&gt;간단한 예제를 생각해보자. 명령줄의 질문을 통해 사용자로부터 어떠한 정보를 입력받는 프로그램을 작성한다고 생각해보자. 나는 아마 다음과 같은 것을 작성할 것이다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generic</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-generic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/ioc-container-generic/</guid>
      <description>&lt;h1 id=&#34;generic&#34;&gt;Generic&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#generic&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring4 Generic은 Autowired 및 Qualifired를 보완하여 Generic을 지원합니다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;기존 Autowire 및 Qualifier의 기능에 대하여 확장하여 Spring4에서 추가로 지원하는 Generic 타입의 Autowire기능에 대하여 알아본다.&lt;/p&gt;&#xA;&lt;h3 id=&#34;autowire-및-qualifier&#34;&gt;Autowire 및 Qualifier&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#autowire-%eb%b0%8f-qualifier&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;autowiring-예제&#34;&gt;Autowiring 예제&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#autowiring-%ec%98%88%ec%a0%9c&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&#xA;&lt;p&gt;다음은 Customer 클래스에 Person property로 Autowire하는 예제이다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;package&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;com.egovframe.common&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;org.springframework.beans.factory.annotation.Autowired&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;org.springframework.beans.factory.annotation.Qualifier&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Customer&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Autowired&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;   &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;//...&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>AOP 서비스</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop/</guid>
      <description>&lt;h1 id=&#34;aop-서비스&#34;&gt;AOP 서비스&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#aop-%ec%84%9c%eb%b9%84%ec%8a%a4&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;AOP 서비스는 관점지향 프로그래밍(Aspect Oriented Programming: AOP) 사상을 구현하고 지원한다. 실행환경 AOP 서비스는 Spring AOP를 사용한다. 본 장에서는 AOP의 개요 및 Spring의 AOP 지원을 중심으로 살펴본다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;aop-개요&#34;&gt;AOP 개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#aop-%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;개별 프로그래밍 언어는 프로그램 개발을 위해 고유한 관심사 분리(Separation of Concerns) 패러다임을 갖는다. 예를 들면 절차적 프로그래밍은 상태값을 갖지 않는 연속된 함수들의 실행을 프로그램으로 이해하고 모듈을 주요 분리 단위로 정의한다. 객체지향 프로그래밍은 일련의 함수 실행이 아닌 상호작용하는 객체들의 집합으로 보며 클래스를 주요 단위로 한다.&lt;br&gt;&#xA;객체지향 프로그래밍은 많은 장점에도 불구하고, 다수의 객체들에 분산되어 중복적으로 존재하는 공통 관심사가 존재한다. 이들은 프로그램을 복잡하게 만들고, 코드의 변경을 어렵게 한다.&lt;br&gt;&#xA;관점 지향 프로그래밍(AOP, Aspect-Oriented Programming)은 이러한 객체지향 프로그래밍의 문제점을 보완하는 방법으로 핵심 관심사를 분리하여 프로그램 모듈화를 향상시키는 프로그래밍 스타일이다. AOP는 객체를 핵심 관심사와 횡단 관심사로 분리하고, 횡단 관심사를 관점(Aspect)이라는 모듈로 정의하고 핵심 관심사와 엮어서 처리할 수 있는 방법을 제공한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>@AspectJ 어노테이션을 이용한 AOP 지원</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop-aspectj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop-aspectj/</guid>
      <description>&lt;h1 id=&#34;aspectj-어노테이션을-이용한-aop-지원&#34;&gt;@AspectJ 어노테이션을 이용한 AOP 지원&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#aspectj-%ec%96%b4%eb%85%b8%ed%85%8c%ec%9d%b4%ec%85%98%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-aop-%ec%a7%80%ec%9b%90&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;@AspectJ는 Java 5 어노테이션을 사용한 일반 Java 클래스로 관점(Aspect)를 정의하는 방식이다. @AspectJ 방식은 AspectJ 5 버전에서 소개되었으며, Spring은 2.0 버전부터 AspectJ 5 어노테이션을 지원한다. Spring AOP 실행환경은 AspectJ 컴파일러나 직조기(Weaver)에 대한 의존성이 없이 @AspectJ 어노테이션을 지원한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;aspectj-설정하기&#34;&gt;@AspectJ 설정하기&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#aspectj-%ec%84%a4%ec%a0%95%ed%95%98%ea%b8%b0&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;@AspectJ를 사용하기 위해서 다음 코드를 Spring 설정에 추가한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XML 스키마 기반 AOP 지원</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop-xmlschema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop-xmlschema/</guid>
      <description>&lt;h1 id=&#34;xml-스키마-기반-aop-지원&#34;&gt;XML 스키마 기반 AOP 지원&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#xml-%ec%8a%a4%ed%82%a4%eb%a7%88-%ea%b8%b0%eb%b0%98-aop-%ec%a7%80%ec%9b%90&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Java 5 버전을 사용할 수 없거나, XML 기반 설정을 선호한다면, Spring 2.0 이상에서 제공하는 XML 스키마 기반의 AOP를 사용할 수 있다. Spring은 관점(Aspect) 정의를 지원하기 위해 “aop” 네임스페이스를 제공한다. @AspectJ를 이용한 AOP 지원에서 사용된 포인트컷 표현식과 충고(Advice) 유형은 XML 스키마 기반 AOP 지원에도 동일하게 제공된다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;관점aspect-정의하기&#34;&gt;관점(Aspect) 정의하기&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b4%80%ec%a0%90aspect-%ec%a0%95%ec%9d%98%ed%95%98%ea%b8%b0&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Spring 어플리케이션 컨텍스트에서 빈으로 정의된 일반 Java 개체는 관점(Aspect)으로 정의될 수 있다. 관점(Aspect)은 &amp;lt;aop:aspect&amp;gt; 요소를 사용하여 정의한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>실행환경 AOP 가이드라인</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop-egovrteaopguide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/aop-egovrteaopguide/</guid>
      <description>&lt;h1 id=&#34;실행환경-aop-가이드라인&#34;&gt;실행환경 AOP 가이드라인&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%8b%a4%ed%96%89%ed%99%98%ea%b2%bd-aop-%ea%b0%80%ec%9d%b4%eb%93%9c%eb%9d%bc%ec%9d%b8&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;전자정부 실행환경은 XML Schema에 기반한 AOP 방법을 사용하며, 예외처리와 트랜잭션 처리에 적용하였다. XML Schema에 기반한 AOP 방법은 @AspectJ Annotation 기반 방법에 비해 횡단 관심사에 대한 설정관계를 파악하기 유리하다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;예외-처리&#34;&gt;예외 처리&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%98%88%ec%99%b8-%ec%b2%98%eb%a6%ac&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;실행환경은 DAO에서 발생한 Exception을 받아 Service단에서 처리할 수 있다. 실행환경에서 추가로 제공하는 Exception은 다음과 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resource 서비스</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/resource/</guid>
      <description>&lt;h1 id=&#34;resource-서비스&#34;&gt;Resource 서비스&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#resource-%ec%84%9c%eb%b9%84%ec%8a%a4&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;리소스를 활용하여 가장 많이 사용하는 메시지 제공 서비스를 살펴본다. 메시지 제공 서비스는 미리 정의된 파일에서 메시지를 읽어 들인 후, 오류 발생시 또는 안내 메시지를 제공하기 위해 키값에 해당하는 메시지를 가져오는 기능을 제공한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;message-basic&#34;&gt;Message Basic&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#message-basic&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;메시지를 활용하기 위한 기본 설정 및 활용에 대해서 예제를 중심으로 설명한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring Expression Language(SpEL)</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/spel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/spel/</guid>
      <description>&lt;h1 id=&#34;spring-expression-languagespel&#34;&gt;Spring Expression Language(SpEL)&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#spring-expression-languagespel&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring 3.0에서 처음 소개된 스프링 전용 표현식 언어로 강력하고 유연하게 사용된다.&lt;br&gt;&#xA;SpEL은 빈 오브젝트에 직접 접근할 수 있는 표현식을 이용해서 프로퍼티 값을 능동적으로 가져오는 방법이며 가장 기본적이다. 또한 jsp에서 &amp;lt;spring:eval&amp;gt;태그를 사용하여 SpEL을 적용 할 수도 있다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;빈-설정파일을-사용하여-spel적용&#34;&gt;빈 설정파일을 사용하여 SpEL적용&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%eb%b9%88-%ec%84%a4%ec%a0%95%ed%8c%8c%ec%9d%bc%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%98%ec%97%ac-spel%ec%a0%81%ec%9a%a9&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;빈 프로퍼티에 값을 설정하면, 다른 빈이나 프로퍼티에 접근 가능하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SpEL 예제(Spring Expression Language Example)</title>
      <link>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/rex-spel-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://chris-yoon.github.io/egovframe-docs/docs/egovframe-runtime/foundation-layer-core/rex-spel-example/</guid>
      <description>&lt;h1 id=&#34;spel-예제spring-expression-language-example&#34;&gt;SpEL 예제(Spring Expression Language Example)&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#spel-%ec%98%88%ec%a0%9cspring-expression-language-example&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ea%b0%9c%ec%9a%94&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Spring 3.0에 새롭게 추가된 SPeL 지원기능을 이용하여, JSP 파일상에서 Spring Expression Language를 사용하는 기능에 대한 예제를 제공한다. 이 예제에서는 입력된 데이터 값에 대하여 SPeL의 출력값 포맷팅 기능을 활용하여 출력값을 형식에 맞게 화면에 표시해주는 기능을 제공한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;설명&#34;&gt;설명&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%ec%84%a4%eb%aa%85&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 해당 예제를 실행하면 아래와 같은 예제페이지가 호출된다.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img alt=&#34;spel-1&#34; src=&#34;../images/spel-1.png&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
